basePath: /api
definitions:
  api.ExportAnswer:
    properties:
      books:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      langs:
        $ref: '#/definitions/models.Languages'
        type: object
      length:
        type: integer
    type: object
  api.UsersAnswer:
    properties:
      length:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  api.changeAnswer:
    properties:
      message:
        type: string
    type: object
  api.passwordChangeRequest:
    properties:
      email:
        type: string
    type: object
  api.passwordToken:
    properties:
      password:
        type: string
      token:
        type: string
    type: object
  httputil.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  models.AdminCommandToUser:
    properties:
      action:
        type: string
      user:
        $ref: '#/definitions/models.User'
        type: object
    type: object
  models.Author:
    properties:
      full_name:
        type: string
      id:
        type: integer
    type: object
  models.AuthorRequest:
    properties:
      author_id:
        type: integer
    type: object
  models.Book:
    properties:
      annotation:
        type: string
      authors:
        items:
          $ref: '#/definitions/models.Author'
        type: array
      cover:
        type: boolean
      docdate:
        type: string
      filename:
        type: string
      format:
        type: string
      id:
        type: integer
      lang:
        type: string
      path:
        type: string
      registerdate:
        type: string
      series:
        items:
          $ref: '#/definitions/models.Series'
        type: array
      title:
        type: string
    type: object
  models.BookDownload:
    properties:
      book_id:
        type: integer
      format:
        type: string
    required:
    - book_id
    - format
    type: object
  models.Languages:
    items:
      properties:
        count:
          type: integer
        language:
          type: string
      type: object
    type: array
  models.LoggedInUser:
    properties:
      first_name:
        type: string
      is_superuser:
        type: boolean
      last_name:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      invite:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - invite
    - password
    - username
    type: object
  models.SelfUserChangeRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      new_password:
        type: string
      password:
        type: string
    type: object
  models.Series:
    properties:
      id:
        type: integer
      lang_code:
        type: integer
      ser:
        type: string
      ser_no:
        type: integer
    type: object
  models.User:
    properties:
      active:
        type: boolean
      date_joined:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_superuser:
        type: boolean
      last_login:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.UserFilters:
    properties:
      desc:
        type: boolean
      email:
        type: string
      limit:
        type: integer
      offset:
        type: integer
      order:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: aladex@gmail.com
    name: API Support
  description: GOPDS API implementation to django service
  license: {}
  title: GOPDS API
  version: "1.0"
paths:
  /admin/user:
    post:
      consumes:
      - application/json
      description: user object
      parameters:
      - description: User фсешщт
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AdminCommandToUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Returns an users object
      tags:
      - admin
  /admin/users:
    post:
      consumes:
      - application/json
      description: users list for admin space
      parameters:
      - description: User filters
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserFilters'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UsersAnswer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Returns users list
      tags:
      - admin
  /books/author:
    post:
      consumes:
      - application/json
      description: возвращает JSON с автором
      parameters:
      - description: Just token without bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: Author ID
        in: query
        name: author
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthorRequest'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: возвращает JSON с автором
  /books/authors:
    get:
      consumes:
      - application/json
      description: возвращает JSON с авторами
      parameters:
      - description: Just token without bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Author ID
        in: query
        name: author
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ExportAnswer'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: возвращает JSON с авторами
  /books/change-me:
    post:
      consumes:
      - application/json
      description: user object
      parameters:
      - description: User object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SelfUserChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoggedInUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Returns an users object
      tags:
      - users
  /books/file:
    post:
      consumes:
      - application/json
      description: returns file of book in answered type
      parameters:
      - description: Book Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.BookDownload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookDownload'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: returns file of book in answered type
      tags:
      - files
  /books/list:
    get:
      consumes:
      - application/json
      description: возвращает JSON с книгами
      parameters:
      - description: Just token without bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Title of book
        in: query
        name: title
        type: string
      - description: Author ID
        in: query
        name: author
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ExportAnswer'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: возвращает JSON с книгами
  /change-password:
    post:
      consumes:
      - application/json
      description: method for change user
      parameters:
      - description: user info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.passwordToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoggedInUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: method for change user
      tags:
      - login
  /change-request:
    post:
      consumes:
      - application/json
      description: method for change request
      parameters:
      - description: user info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.passwordChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.changeAnswer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: method for change request
      tags:
      - login
  /drop-sessions:
    get:
      consumes:
      - application/json
      description: Метод для сброса всех сессий пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoggedInUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Метод для сброса всех сессий пользователя
      tags:
      - login
  /login:
    post:
      consumes:
      - application/json
      description: Login method for token generation
      parameters:
      - description: Login Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoggedInUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Returns an user and token for header
      tags:
      - login
  /logout:
    get:
      consumes:
      - application/json
      description: Метод разлогина
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoggedInUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Метод разлогина
      tags:
      - login
  /register:
    post:
      consumes:
      - application/json
      description: creates a new user
      parameters:
      - description: User Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: creates a new user
      tags:
      - login
  /self-user:
    get:
      consumes:
      - application/json
      description: Метод для получения информации по пользователю
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoggedInUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Метод для получения информации по пользователю
      tags:
      - login
  /token:
    post:
      consumes:
      - application/json
      description: check for token validation
      parameters:
      - description: Token Info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.passwordToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: check for token validation
      tags:
      - login
swagger: "2.0"
