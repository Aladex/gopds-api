// Code generated for package email by go-bindata DO NOT EDIT. (@generated)
// sources:
// email/templates/reset_password.gohtml
package email

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _reset_passwordGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xef\x6e\xdb\x36\x10\xff\xee\xa7\x60\x54\x0c\x49\x8a\x28\x92\x93\xc0\x4d\x6d\xcb\x58\xd3\xb4\x4d\x37\x04\x49\x97\xb4\x40\x17\x14\x05\x45\x9e\x6c\x2e\x94\xa8\x92\x94\xe3\xa4\x0b\xb0\x3d\xc1\x9e\x61\x6f\xb0\xed\xeb\x80\xed\x15\xd2\x37\x1a\x28\x59\xb6\x2c\xcb\x8e\xe3\x6c\x43\x81\x4d\x5f\x22\x9a\xc7\xbb\xfb\xdd\x9f\x1f\x4f\x48\x7b\x65\xff\xe8\xe9\xe9\xdb\xe3\x67\xa8\xa7\x43\xde\xa9\xb5\xf3\x3f\x80\x69\xa7\x56\x43\x08\xa1\x76\x08\x1a\x23\xd2\xc3\x52\x81\xf6\xac\x44\x07\xf6\xae\xd5\x29\x6c\xf5\xb4\x8e\x6d\xf8\x90\xb0\xbe\x67\x0d\xec\x04\xdb\x44\x84\x31\xd6\xcc\xe7\x60\x21\x22\x22\x0d\x91\xf6\x2c\x06\x1e\xd0\x2e\xe4\x27\x35\xd3\x1c\x3a\x37\x3f\xdf\xfc\xfa\xe9\x87\x9b\x3f\x3e\xfd\x88\x6e\xfe\xbc\xf9\xc5\xbc\xde\xfc\xfe\xe9\xa7\xb6\x93\x6d\x17\x8c\x44\x38\x04\xcf\xea\x33\xb8\x88\x85\xd4\x05\xbd\x17\x8c\xea\x9e\x47\xa1\xcf\x08\xd8\xe9\x62\x03\xb1\x88\x69\x86\xb9\xad\x08\xe6\xe0\xd5\x73\x9b\x4a\x5f\x72\x40\xfa\x32\x06\xcf\xd2\x30\xd0\x0e\x51\x6a\xb8\x67\x9e\x2f\x43\xa0\x0c\x23\x45\x24\x40\x84\x3e\x8e\x7e\x4f\xf7\x02\x11\x69\x3b\xc0\x04\x4a\x1b\xe6\x19\xee\x85\x8c\x5f\x36\xd1\xea\x89\x48\x24\x01\x74\x82\x23\x85\x8e\xa5\x58\x6d\x55\xcb\xa7\xce\x34\x51\x24\x64\x88\xf9\x0c\x99\x0b\x60\xdd\x9e\x6e\xa2\x1d\xd7\x9d\x96\x50\x92\x34\x11\x17\x04\xf3\xb5\xb2\x4d\xf4\x0d\x74\x13\x8e\xe5\xea\xfa\xc6\xa4\x84\x11\x38\x96\xc2\x2e\xec\x27\x92\xaf\x99\x0c\xaa\xa6\xe3\x18\xa3\x6a\xb3\xab\x34\xd6\x8c\x6c\x12\x11\x3a\xca\x51\xe9\x41\x85\x23\x15\x4b\xe1\xf4\xeb\xae\x73\xb4\x0f\xfc\x65\x1d\x1f\xec\xbd\xdd\xdf\xfb\xd0\x85\x97\x4f\x0e\xb6\xae\xf8\xde\xa1\xfb\xf6\x2a\x39\x7d\x74\x48\x8f\xc0\xdd\x16\xfa\xd8\x4f\x5e\x9f\xb8\x9b\x17\x22\x08\xd6\x51\x60\x40\xea\xb5\x55\xb3\x5a\x5d\x9f\x84\x72\x5d\xfb\x8c\x02\xfd\xe8\xae\x81\xde\x13\x9c\xce\x8c\x72\xbe\x79\xf7\x10\x6b\x81\xe9\x11\x09\x42\xae\x1f\xfb\xdb\xbb\xf4\xe0\xab\xc1\xd1\xde\x8b\xe7\xe7\xaf\x48\xe3\xcd\x8b\x37\xcf\x4f\xc2\xa7\xd1\xd3\xf7\xfc\xd1\xab\x6f\x5f\x34\x16\x0b\x71\x45\xb0\x7d\x41\x2f\x37\x46\x2b\x8d\x7d\x0e\x85\x25\x1d\xbf\xe3\x52\x22\xec\x50\xd9\xa6\x7b\x6c\xc5\xae\xc0\xc6\xf4\xbb\x44\xe9\x26\xaa\xbb\xee\x17\x2d\xe4\x3c\x44\x75\xf4\xd0\x99\x94\xbf\x00\xff\x9c\xe9\x79\x67\xb6\x8a\x67\x0a\x3e\x4e\x79\x55\x72\x25\x54\xc2\x4e\x65\x6c\xa9\x62\x4c\xa0\x89\xdc\x58\xb7\x66\x88\xf0\x2a\x91\xeb\xda\xd8\x1a\x0b\xbb\x15\x50\x59\xa4\x41\xc6\x82\x63\xcd\x44\x64\x87\x82\x42\x13\xf9\x8c\x24\x3e\x23\xad\x2a\x9f\xf1\xd9\xc0\xc6\x71\xcc\xc1\xa6\x58\x63\x9b\x82\x06\xa2\x85\x54\xef\x4a\xba\x27\x6a\x99\x45\x3d\x90\x4c\xa3\x15\x16\x1a\x7a\xc3\x51\x09\x45\x56\xc8\xec\x0a\x16\x14\xcd\xeb\xf9\x36\x61\xce\x22\xb0\x7b\x0b\x0a\x13\xc1\x85\xbc\x5d\x2c\xcd\x33\x05\x22\x64\x1a\x32\xd3\x79\x11\x54\x4a\x17\x83\x4f\x59\xff\x2c\xed\xd4\x87\x9e\x15\x62\xd9\x65\x51\x13\xd5\x1b\xf1\x00\xb9\x2d\xab\x1c\xba\x7c\xdf\x9d\xa5\x35\x7f\x35\x35\x5e\x3a\x9b\xde\x10\x59\xe9\xcd\x44\x90\x07\x64\xae\x50\x8c\x29\x65\x51\x77\x96\x17\x0b\xf9\x39\x59\xe8\x25\x4f\x7d\x21\x29\x48\x9b\x08\xce\x71\xac\xa0\x89\xf2\xb7\xdb\x50\x97\x1b\x76\x98\xb7\x07\x75\xbc\xbb\x05\x5b\x95\x47\xa6\x4b\x3f\x8f\x01\x4e\xb4\x98\x53\x33\x69\x0b\xdf\x9e\xfe\x56\x05\xb2\x26\x2a\x71\xad\x48\xb4\xd1\x5d\x3e\x91\xb1\x57\xdb\x49\xab\xa3\x53\xab\xb5\x9d\x6c\x38\x69\xa7\xd9\x4d\x7f\xf5\x2c\x1f\x93\xf3\xae\x14\x49\x44\xed\x1c\x2e\x3c\x06\x02\x41\xcb\x32\x47\x28\xeb\x23\xc2\xb1\x52\x9e\x15\x4b\x30\xe7\x41\x5a\x99\x85\xa1\x02\xca\x54\xcc\xf1\xe5\xd0\x38\x0a\xf1\xc0\x1e\x96\x8a\x9b\xad\x72\xc4\x6e\x0b\x89\x3e\xc8\x80\x8b\x8b\x26\xea\x31\x4a\x21\x6a\x15\xfb\xb3\x1e\x0f\x5a\xa5\x18\x99\x5f\x72\xaf\x82\x20\x68\x21\x11\x63\xc2\xf4\xa5\x51\x36\x9c\x3f\x66\x0c\x42\xe8\xe6\x37\xb4\x77\x74\xf4\xf5\xc9\xfe\xeb\xc3\xe3\xcd\x5a\xdb\xa1\xac\x6f\xf0\xac\xd8\x36\x52\x1a\x4b\x9d\x95\xb8\x6d\x77\x6a\xed\xac\x86\xb2\xd8\x7a\x96\x6b\x21\x02\x9c\x0f\xab\x74\xb4\x36\x1c\x98\xaf\xb3\xc9\xc9\x32\x29\xb4\xf2\x59\x6f\xac\xb8\x07\x52\xa4\x8a\xd3\xdf\xb5\x1c\xcf\x49\x6d\x4d\x11\xe6\xac\x1b\x79\x16\x01\xc3\x8e\x16\xf2\xbb\x29\x3e\xcf\x1a\x46\xbd\x30\x55\xe5\x6a\xcf\x58\x80\xd6\xba\x1a\x0c\x23\xa3\xc7\xeb\xdf\xaf\xbd\x7c\xb6\xfe\xae\x24\x96\x41\x28\xeb\xbe\x33\xa2\x86\xeb\x96\x1c\x98\xc2\x30\xb9\x31\x85\xa7\x3f\x5c\x6b\x11\xcf\xd1\xda\x5e\x39\x83\x88\xb2\xe0\x5d\x1e\xa6\x12\x90\x25\x73\x91\x97\x64\xa1\x06\x1b\xae\x1b\x0f\x5a\x4b\x82\xe2\x10\xe8\x62\x8a\x82\xf4\xb1\x2a\x8f\x15\x3a\x62\x44\x70\xdb\x86\x86\xb7\x76\x52\x2e\xbe\x65\x04\xdb\x40\x07\xc0\xfb\xa0\x19\xc1\x1b\xe8\x89\x64\x98\x6f\x20\x33\xd7\xd8\x0a\x24\x0b\x5a\x39\xa7\x69\x11\x37\xd1\x76\x3c\x40\x4a\x70\x46\xd1\x03\xba\x43\x31\x0d\xaa\xf0\x8d\xe0\xf4\xea\xe3\xb0\x0c\x59\x75\xa2\xed\xb6\xb7\x4c\x97\x4d\x0d\x73\x88\x83\xd6\x20\xed\x61\xac\x9b\xc8\x9e\xee\xcf\x9d\xdd\xea\xd8\x16\x9f\x8f\x1f\xd1\xe6\xa9\xf9\x26\x41\xd7\xd7\x6d\xa7\x57\x9f\x11\x74\x47\xd3\x8a\x1c\x39\xe5\x24\xb5\x9d\xb4\x40\x96\x6b\x92\x29\x1b\x0b\xeb\xaf\xa8\xd6\xb1\xb6\xb1\x96\x94\x04\x20\xa2\x63\x0a\x28\x73\x03\x11\xf1\x25\xf2\xb9\x20\xe7\xff\x33\xc4\xe7\xc6\x10\xd3\xa8\x4a\x79\x2b\xbb\xb2\x28\xf2\xfb\xd2\x88\x61\x90\xfb\xf2\x47\xf1\x9e\x6d\x4c\x35\x72\x6a\x61\x1e\x89\xc4\xd3\x1c\x62\x75\x4c\x6b\x1f\x82\x52\xb8\x9b\x35\x77\x7c\xbf\xde\x46\xc5\x0e\x1a\x05\x7c\x5e\x56\xfc\x44\x6b\x11\xfd\xdd\x79\x99\x13\x86\x7b\x4e\x0a\xb3\xf4\xce\x75\x78\x86\xf3\xd3\xf4\x30\x74\x7f\xaa\x7c\xea\x5b\xb7\xb3\xf4\xd2\x08\x17\x53\xbb\x30\xc0\x85\xc1\x66\x23\xf9\x08\xec\xf0\x7a\x94\x98\xb2\x44\x35\x51\x63\x71\xc4\x13\x16\x31\xea\x49\x08\x3c\x2b\xbd\xb4\xc4\x39\x44\xe8\xfa\x7a\x76\x9f\xce\x79\x34\x96\x5d\xd0\x9e\xf5\xde\xe7\x38\x3a\x5f\x4a\x45\x79\xbc\x66\x51\xda\xb2\xe9\xe5\xd1\x1a\x7f\x44\xa5\x9f\x7a\xdb\x8d\x7f\x80\x21\x0a\x83\x77\x3a\x7b\x57\x7f\x9f\xa0\xca\xd0\x9b\x00\xee\x65\xdd\x69\x98\x01\xdf\x31\xf3\x95\x8c\x31\x47\x7a\xc1\xca\xaa\xbc\xdd\x97\x73\x60\xbe\xd1\xb9\x86\x96\xe2\xc3\x02\xd5\xfd\xd7\xef\xa9\xbc\xe2\x7c\xa1\xb5\x08\x2b\xc6\xe1\xa5\x2e\xb2\xd3\x1e\x8e\xce\xd5\xbf\x74\x8f\x7d\xbe\x63\x6c\xad\x36\x3a\x3b\xae\xbd\xfc\x4b\xb9\xd6\x76\xcc\x7b\xa7\xd6\x76\xb2\xff\x76\xfc\x15\x00\x00\xff\xff\xbd\xf4\x99\x93\x05\x19\x00\x00")

func reset_passwordGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_reset_passwordGohtml,
		"reset_password.gohtml",
	)
}

func reset_passwordGohtml() (*asset, error) {
	bytes, err := reset_passwordGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reset_password.gohtml", size: 6405, mode: os.FileMode(436), modTime: time.Unix(1590646297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"reset_password.gohtml": reset_passwordGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"reset_password.gohtml": &bintree{reset_passwordGohtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
